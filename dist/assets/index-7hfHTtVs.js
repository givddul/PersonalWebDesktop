(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function e(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(s){if(s.ep)return;s.ep=!0;const n=e(s);fetch(s.href,n)}})();class h{static highestZIndex=0;constructor(t,e){this.window=document.getElementById(t),this.windows=e,this.window.addEventListener("click",()=>this.bringToFront()),this.header=this.window.children[0],this.header.addEventListener("mousedown",i=>this.onMouseDown(i))}onMouseDown(t){console.log("grabbing window "+this.window.id),this.bringToFront();const e=t.clientX,i=t.clientY,s=parseInt(window.getComputedStyle(this.window).left,10),n=parseInt(window.getComputedStyle(this.window).top,10),o=c=>{const l=c.clientX-e,m=c.clientY-i;this.window.style.left=s+l+"px",this.window.style.top=n+m+"px"},a=()=>{document.removeEventListener("mousemove",o),document.removeEventListener("mouseup",a)};document.addEventListener("mousemove",o),document.addEventListener("mouseup",a),t.preventDefault()}bringToFront(){h.highestZIndex+=1,this.window.style.zIndex=h.highestZIndex}showWindow(){h.highestZIndex+=1,this.window.style.zIndex=h.highestZIndex,this.window.style.display="block"}hide(){this.window.style.display="none"}remove(){this.window.remove();for(let t=0;t<this.windows.length;t++)if(this.windows[t].window.id===this.window.id){this.windows.splice(t,1);break}}}class p{constructor(t){this.apiUrl=t}async fetchQuestion(t){const e=await fetch(t);if(!e.ok)throw new Error("Network response was not ok");return e.json()}async submitAnswer(t,e){const i=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({answer:e})});return i.status===400?null:i.json()}}class w extends h{constructor(t,e){super(t,e),this.apiUrl="https://courselab.lnu.se/quiz/question/1",this.quizApi=new p(this.apiUrl),this.initializeQuiz()}initializeQuiz(){this.closeButton=this.window.querySelector(".close-button"),this.closeButton.addEventListener("click",()=>this.remove()),this.username="",this.score=0,this.currentQuestionNumber=1,this.totalQuestions=7,this.timeLimit=10,this.timer=null,this.initializeUI(),this.askForUsername()}initializeUI(){this.usernameInput=this.window.querySelector("#username-input"),this.usernameContainer=this.window.querySelector("#username-container"),this.invalidUsername=this.window.querySelector("#invalid-username"),this.startQuizButton=this.window.querySelector("#start-quiz-button"),this.quizContainer=this.window.querySelector("#quiz-container"),this.questionContainer=this.window.querySelector("#question-container"),this.answersContainer=this.window.querySelector("#answers-container"),this.highScoresList=this.window.querySelector("#high-scores-list"),this.highScoresSection=this.window.querySelector("#high-scores"),this.questionText=this.window.querySelector("#question-text"),this.timerElement=this.window.querySelector("#timer"),this.feedbackElement=this.window.querySelector("#feedback"),this.submitAnswerButton=this.window.querySelector("#submit-button"),this.restartQuizButton=this.window.querySelector("#restart-button"),this.highScoresButton=this.window.querySelector("#high-scores-button"),this.highScoresButton.addEventListener("click",()=>this.displayHighScores()),this.restartQuizButton.addEventListener("click",()=>this.restartGame()),this.submitAnswerButton.addEventListener("click",()=>this.processAnswer())}askForUsername(){this.startQuizButton.addEventListener("click",()=>{const t=this.usernameInput.value.trim();t?(this.usernameContainer.style.display="none",this.username=t,this.start()):this.invalidUsername.textContent="Please enter a username"})}async start(){this.score=0,this.currentQuestionNumber=1,this.hideElement(this.questionContainer),this.hideElement(this.restartQuizButton),this.hideElement(this.highScoresButton),this.feedbackElement.textContent="",this.startTime=Date.now(),await this.loadQuestion(this.quizApi.apiUrl)}startTimer(){this.timeLeft=this.timeLimit,this.timerElement.textContent=`Time left: ${this.timeLeft}s`,this.timer=setInterval(()=>{this.timeLeft-=1,this.timerElement.textContent=`Time left: ${this.timeLeft}s`,this.timeLeft<=0&&(clearInterval(this.timer),this.timerElement.textContent="Time is up!",this.handleTimeout())},1e3)}stopTimer(){clearInterval(this.timer),this.timerElement.textContent=""}handleTimeout(){this.feedbackElement.textContent="You ran out of time! GAME OVER!",this.endGame(!1)}async loadQuestion(t){try{const e=await this.quizApi.fetchQuestion(t);this.currentQuestion=e,this.displayQuestion()}catch{this.feedbackElement.textContent="Error loading question.",this.showElement(this.restartQuizButton)}}displayQuestion(){if(this.questionText.textContent=this.currentQuestion.question,this.answersContainer.innerHTML="",this.currentQuestion.alternatives){const t=this.currentQuestion.alternatives,e=Object.keys(t);for(let i=0;i<e.length;i++){const s=e[i],n=t[s],o=document.createElement("label"),a=document.createElement("input");a.type="radio",a.name="answer",a.value=s,o.append(a,n),this.answersContainer.appendChild(o)}}else{const t=document.createElement("input");t.type="text",t.name="answer",this.answersContainer.appendChild(t)}this.showElement(this.questionContainer),this.showElement(this.quizContainer),this.startTimer()}getAnswer(){if(!!this.currentQuestion.alternatives){const e=document.querySelector('input[name="answer"]:checked');return e?e.value:null}else{const e=document.querySelector('input[name="answer"]');return e?e.value:null}}async processAnswer(){console.log("Processing answer for:",this.window.id);const t=this.getAnswer();if(!t){this.feedbackElement.textContent="Please select or enter an answer";return}this.feedbackElement.textContent="",this.stopTimer();try{const e=await this.quizApi.submitAnswer(this.currentQuestion.nextURL,t);if(!e){this.endGame(!1);return}e.nextURL&&this.currentQuestionNumber<this.totalQuestions?(this.score++,this.currentQuestionNumber++,await this.loadQuestion(e.nextURL)):(this.score++,this.endGame(!0))}catch{this.feedbackElement.textContent="Error submitting answer."}}endGame(t){if(this.hideElement(this.questionContainer),this.feedbackElement.textContent=t?`Congratulations ${this.username}! YOU WON! Your score is ${this.score}/${this.totalQuestions}.`:`GAME OVER! Your score is ${this.score}/${this.totalQuestions}.`,this.showElement(this.feedbackElement),this.showElement(this.restartQuizButton),t){this.endTime=Date.now();const e=this.endTime-this.startTime;this.updateHighScores(this.username,e),this.displayHighScores()}else this.showElement(this.highScoresButton)}restartGame(){this.feedbackElement.textContent="",this.hideElement(this.highScoresSection),this.start()}hideElement(t){t.style.display="none"}showElement(t){t.style.display="block"}updateHighScores(t,e){const i=JSON.parse(localStorage.getItem("ls224nh_highScores"))||[];i.push({username:t,time:e}),i.sort((s,n)=>s.time-n.time),i.splice(5),localStorage.setItem("ls224nh_highScores",JSON.stringify(i))}displayHighScores(){const t=JSON.parse(localStorage.getItem("ls224nh_highScores"))||[];this.highScoresList.innerHTML="";for(let e=0;e<t.length;e++){const i=t[e],s=(i.time/1e3).toFixed(2),n=document.createElement("li");n.textContent=`${e+1}. ${i.username} - ${s} seconds`,this.highScoresList.appendChild(n)}this.showElement(this.highScoresSection),this.hideElement(this.feedbackElement),this.hideElement(this.highScoresButton)}}class y extends h{constructor(t,e){super(t,e),this.initializeMemoryGame()}initializeMemoryGame(){this.matchSound=new Audio("./sounds/match.mp3"),this.victorySound=new Audio("./sounds/victory.mp3"),this.shuffleSound=new Audio("./sounds/shuffle.mp3"),this.closeButton=this.window.querySelector(".close-button"),this.closeButton.addEventListener("click",()=>this.remove()),this.window.setAttribute("tabindex","0"),this.window.addEventListener("click",t=>{t.target.classList.contains("close-button")||this.window.focus()}),this.initializeGameComponents(),this.initializeEvents()}initializeGameComponents(){this.gridSizeSelect=this.window.querySelector("#grid-size"),this.startButton=this.window.querySelector("#start-memory-button"),this.gridSelection=this.window.querySelector("#grid-selection"),this.gameContainer=this.window.querySelector("#memory-game-container"),this.attemptsDisplay=this.window.querySelector("#attempts"),this.restartButton=this.window.querySelector("#restart-memory-button"),this.gameBoard=this.window.querySelector("#game-board"),this.statusDiv=this.window.querySelector("#status"),this.hide(this.gameBoard),this.hide(this.statusDiv),this.rows=0,this.cols=0}initializeEvents(){this.restartButton.addEventListener("click",()=>this.resetGame()),this.startButton.addEventListener("click",()=>this.initializeGame()),this.window.addEventListener("keydown",t=>this.handleKeyPress(t)),this.gridSizeSelect.addEventListener("click",function(t){t.stopPropagation()})}initializeGame(){switch(this.hide(this.gridSelection),this.show(this.statusDiv),this.gameBoard.style.display="grid",this.cards=[],this.cardValues=[],this.attempts=0,this.attemptsDisplay.textContent=`Attempts: ${this.attempts}`,this.firstCard=null,this.secondCard=null,this.lockBoard=!1,this.currentCardIndex=0,parseInt(this.gridSizeSelect.value)){case 4:this.rows=2,this.cols=2;break;case 8:this.rows=2,this.cols=4;break;default:this.rows=4,this.cols=4}this.gameBoard.style.gridTemplateColumns=`repeat(${this.cols}, 1fr)`,this.hide(this.gridSelection),this.gameBoard.style.display="grid";const e=this.rows*this.cols/2;for(let i=0;i<e;i++)for(let s=0;s<2;s++)this.cardValues.push(i);console.log([...this.cardValues]),this.shuffleArray(this.cardValues);for(let i=0;i<this.cardValues.length;i++){const s=document.createElement("div");s.className="card",s.dataset.cardValue=this.cardValues[i],s.dataset.index=i,this.gameBoard.appendChild(s),this.cards.push(s)}this.cards.forEach(i=>i.addEventListener("click",()=>this.flipCard(i))),this.currentCardIndex=0,this.updateCardFocus(),this.show(this.statusDiv),this.show(this.restartButton)}resetGame(){this.gameBoard.innerHTML="",this.show(this.gridSelection),this.hide(this.gameBoard),this.hide(this.statusDiv),this.attemptsDisplay.textContent="Attempts: 0"}shuffleArray(t){for(let e=t.length-1;e>0;e--){const i=Math.floor(Math.random()*(e+1));[t[e],t[i]]=[t[i],t[e]]}this.shuffleSound.play()}flipCard(t){if(this.lockBoard||t===this.firstCard)return;if(new Audio("./sounds/card turned.mp3").play(),t.style.backgroundImage=`url('./img/${t.dataset.cardValue}.png')`,!this.firstCard){this.firstCard=t;return}this.secondCard=t,this.checkForMatch()}checkForMatch(){this.firstCard.dataset.cardValue===this.secondCard.dataset.cardValue?(this.matchSound.play(),this.disableCards()):this.unflipCards()}checkGameOver(){this.cards.every(e=>e.classList.contains("hidden"))&&(this.victorySound.play(),this.attemptsDisplay.innerHTML=`Congratulations, you made it in ${this.attempts} attempts`),this.currentCardIndex=0,this.updateCardFocus()}disableCards(){this.firstCard.classList.add("hidden"),this.secondCard.classList.add("hidden"),this.firstCard=null,this.secondCard=null,this.attempts++,this.attemptsDisplay.textContent=`Attempts: ${this.attempts}`,this.checkGameOver()}unflipCards(){this.lockBoard=!0,setTimeout(()=>{this.firstCard.style.backgroundImage="url('./img/back.png')",this.secondCard.style.backgroundImage="url('./img/back.png')",this.firstCard=null,this.secondCard=null,this.lockBoard=!1,this.attempts++,this.attemptsDisplay.textContent=`Attempts: ${this.attempts}`,new Audio("./sounds/card turned.mp3").play()},1e3)}handleKeyPress(t){t.key==="ArrowRight"?this.moveFocus(1,0):t.key==="ArrowLeft"?this.moveFocus(-1,0):t.key==="ArrowUp"?this.moveFocus(0,-1):t.key==="ArrowDown"?this.moveFocus(0,1):t.key==="Enter"&&!this.cards[this.currentCardIndex].classList.contains("hidden")&&this.flipCardByKey()}moveFocus(t,e){const i=this.rows,s=this.cols;let n=this.currentCardIndex;for(;;){const o=Math.floor(n/s),a=n%s,c=o+e,l=a+t;if(c>=i||l>=s||c<0||l<0||(n=c*s+l,!this.cards[n].classList.contains("hidden"))||n===this.currentCardIndex)break}this.currentCardIndex=n,this.cards.forEach(o=>o.classList.remove("focused")),this.cards[this.currentCardIndex].classList.add("focused")}flipCardByKey(){const t=this.cards[this.currentCardIndex];this.flipCard(t)}hide(t){t.style.display="none"}show(t){t.style.display="block"}}class v extends h{constructor(t,e){super(t,e),this.initializeWindow(),this.initializeChat()}initializeWindow(){this.closeButton=this.window.querySelector(".close-button"),this.closeButton.addEventListener("click",()=>this.remove())}initializeChat(){this.socket=new WebSocket("wss://courseLab.lnu.se/message-app/socket"),this.chatWindow=this.window.querySelector("#chat-window"),this.messageContainer=this.window.querySelector("#message-container"),this.messageInput=this.window.querySelector("#message-input"),this.sendButton=this.window.querySelector("#send-button"),this.usernameInput=this.window.querySelector("#username-input-chat"),this.usernameSubmit=this.window.querySelector("#username-submit"),this.emojiPicker=this.window.querySelector("#emoji-picker"),this.emojiButton=this.window.querySelector("#emoji-button"),this.changeUsernameButton=this.window.querySelector("#change-username-button"),this.usernameContainer=this.window.querySelector("#username-container"),this.sendSound=new Audio("./sounds/send.mp3"),this.receiveSound=new Audio("./sounds/receive.mp3"),this.username=localStorage.getItem("username")||"",this.username?(this.chatWindow.style.display="block",this.usernameContainer.style.display="none"):this.chatWindow.style.display="none",this.loadChatHistory(),this.addEventListeners()}addEventListeners(){this.usernameSubmit.onclick=()=>this.setUsername(),this.sendButton.onclick=()=>this.sendMessage(),this.socket.onmessage=t=>this.receiveMessage(t),this.emojiButton.addEventListener("click",()=>{const t=this.emojiPicker.style.display==="block";this.emojiPicker.style.display=t?"none":"block"}),this.emojiPicker.querySelectorAll(".emoji").forEach(t=>{t.addEventListener("click",()=>{const e=t.textContent;this.messageInput.value+=e,this.emojiPicker.style.display="none"})}),this.changeUsernameButton.addEventListener("click",()=>{this.usernameContainer.style.display="block",this.chatWindow.style.display="none"})}setUsername(){this.username=this.usernameInput.value.trim(),this.username&&(localStorage.setItem("username",this.username),this.chatWindow.style.display="block",this.usernameContainer.style.display="none",this.messageInput.style.display="block",this.sendButton.style.display="block")}sendMessage(){const t=this.messageInput.value.trim();t&&this.username&&(this.socket.send(JSON.stringify({type:"message",data:t,username:this.username,channel:"my, not so secret, channel",key:"eDBE76deU7L0H9mEBgxUKVR0VCnq0XBd"})),this.messageInput.value="",this.sendSound.play(),this.saveMessageToHistory({username:this.username,message:t}))}receiveMessage(t){const e=JSON.parse(t.data);if(e.type==="message"&&e.username!=="Server"){const i=e.username===this.username?"self":"other",s=document.createElement("div");s.className=`message ${i}`,s.textContent=`${e.username}: ${e.data}`,this.messageContainer.appendChild(s),this.messageContainer.scrollTop=this.messageContainer.scrollHeight,e.username!==this.username&&(this.saveMessageToHistory({username:e.username,message:e.data}),this.receiveSound.play())}}saveMessageToHistory(t){const e=JSON.parse(localStorage.getItem("chatHistory"))||[];e.push(t),localStorage.setItem("chatHistory",JSON.stringify(e))}loadChatHistory(){(JSON.parse(localStorage.getItem("chatHistory"))||[]).forEach(e=>{const i=e.username===this.username?"self":"other",s=document.createElement("div");s.className=`message ${i}`,s.textContent=`${e.username}: ${e.message}`,this.messageContainer.appendChild(s)}),this.messageContainer.scrollTop=this.messageContainer.scrollHeight}}class g extends h{constructor(t,e){super(t,e),this.stopwatchInterval=null,this.timerInterval=null,this.stopwatchTime=0,this.timerTime=0,this.stopwatchDisplay=this.window.querySelector("#stopwatch-display"),this.stopWatchStart=this.window.querySelector("#stopwatch-start-button"),this.stopWatchPause=this.window.querySelector("#stopwatch-pause-button"),this.stopWatchStop=this.window.querySelector("#stopwatch-stop-button"),this.stopWatchReset=this.window.querySelector("#stopwatch-reset-button"),this.timerDisplay=this.window.querySelector("#timer-display"),this.timerStart=this.window.querySelector("#timer-start-button"),this.timerStop=this.window.querySelector("#timer-stop-button"),this.timerInput=this.window.querySelector("#timer-input"),this.alarmSound=this.window.querySelector("#alarm-sound"),this.tickSound=this.window.querySelector("#tick-sound"),this.closeButton=this.window.querySelector(".close-button"),this.closeButton.addEventListener("click",()=>this.remove()),this.initializeEvents()}initializeEvents(){this.stopWatchStart.addEventListener("click",()=>this.startStopwatch()),this.stopWatchPause.addEventListener("click",()=>this.pauseStopwatch()),this.stopWatchStop.addEventListener("click",()=>this.stopStopwatch()),this.stopWatchReset.addEventListener("click",()=>this.resetStopwatch()),this.timerStart.addEventListener("click",()=>this.startTimer()),this.timerStop.addEventListener("click",()=>this.stopTimer())}startStopwatch(){clearInterval(this.stopwatchInterval),this.tickSound.currentTime=0,this.tickSound.play(),this.stopwatchInterval=setInterval(()=>this.updateStopwatch(),1e3)}pauseStopwatch(){clearInterval(this.stopwatchInterval),this.tickSound.pause(),this.tickSound.currentTime=0}stopStopwatch(){clearInterval(this.stopwatchInterval),this.tickSound.pause(),this.tickSound.currentTime=0}resetStopwatch(){clearInterval(this.stopwatchInterval),this.stopwatchTime=0,this.updateDisplay(this.stopwatchDisplay,this.stopwatchTime),this.tickSound.pause(),this.tickSound.currentTime=0}startTimer(){if(clearInterval(this.timerInterval),this.timerTime=parseInt(this.timerInput.value,10),isNaN(this.timerTime)||this.timerTime<=0){alert("Please enter a valid number of seconds.");return}this.updateDisplay(this.timerDisplay,this.timerTime),this.tickSound.currentTime=0,this.tickSound.play(),this.timerInterval=setInterval(()=>this.updateTimer(),1e3)}stopTimer(){clearInterval(this.timerInterval),this.alarmSound.pause(),this.alarmSound.currentTime=0,this.tickSound.pause(),this.tickSound.currentTime=0}updateStopwatch(){this.stopwatchTime++,this.updateDisplay(this.stopwatchDisplay,this.stopwatchTime)}updateTimer(){this.timerTime>0?(this.timerTime--,this.updateDisplay(this.timerDisplay,this.timerTime)):(clearInterval(this.timerInterval),this.alarmSound.play(),this.tickSound.pause(),this.tickSound.currentTime=0)}updateDisplay(t,e){const i=Math.floor(e/3600),s=Math.floor((e-i*3600)/60),n=e-i*3600-s*60;t.textContent=`${this.pad(i)}:${this.pad(s)}:${this.pad(n)}`}pad(t){return t<10?"0"+t:t}}const d=[];function u(r){const t=document.createElement("div");t.className=`${r}-window`,t.id=`${r}Window-${d.length}`;const e=30,i=50+d.length*e,s=50+d.length*e;t.style.top=`${i}px`,t.style.left=`${s}px`,document.body.appendChild(t);let n;r==="quiz"?(t.innerHTML=`
            <div class="quiz-window-header">
                <div class="close-button">X</div>
            </div>
           
            <div id="username-container">
                <h3>Enter Your Username</h3>
                <input type="text" id="username-input" placeholder="Username">
                <button id="start-quiz-button">
                    Start Quiz
                </button>
                <p id="invalid-username"></p>
            </div>


            <div id="quiz-container" style="display:none;">
                <div id="timer">Time left: 10s</div>
                <div id="question-container">
                    <h2 id="question-text"></h2>
                    <div id="answers-container"></div>
                    <button id="submit-button">Submit Answer</button>
                </div>
                <p id="feedback"></p>
                <div id="high-scores" style="display:none;">
                    <h2>Highscores</h2>
                    <ul id="high-scores-list"></ul>
                </div>
                <button id="high-scores-button" style="display:none;">Display High Scores</button>
                <button id="restart-button">Restart Quiz</button>
            </div>
        `,n=new w(t.id,d)):r==="memory"?(t.innerHTML=`
            <div class="memory-window-header">
                <div class="close-button">X</div>
            </div>

            <div id="memory-game-container" class="memory-game-container">

                <div id="grid-selection">
                    <p>Select Grid Size:</p>
                    <select id="grid-size">
                        <option value="4">2x2</option>
                        <option value="8" selected>2x4</option>
                        <option value="16">4x4</option>
                    </select>
                    <button id="start-memory-button">Start</button>
                </div>

                <div id="game-board" class="game-board">
                    <!-- cards will be inserted here -->
                </div>

                <div id="status" style="display: none;" class="status">
                    <p><span id="attempts">0</span></p>
                    <button id="restart-memory-button">Restart</button>
                </div>

            </div>

        `,n=new y(t.id,d)):r==="chat"?(t.innerHTML=`
            <div class="chat-window-header">
                <div class="close-button">X</div>
            </div>
            
            <div id="username-container">
                <input type="text" id="username-input-chat" placeholder="Enter your username">
                <button id="username-submit">Chat</button>
            </div>

            <button id="change-username-button">Change Username</button>
        
            <div id="chat-window">
                <div id="message-container"></div>
                
                <div id="input-container">
                    <textarea id="message-input" placeholder="Type your message here..."></textarea>
                    <div id="emoji-picker-container">
                        <button id="emoji-button">😊</button>
                        <div id="emoji-picker" style="display: none;">
                            <span class="emoji">😀</span>
                            <span class="emoji">😂</span>
                            <span class="emoji">🤯</span>
                            <span class="emoji">💀</span>
                        </div>
                    </div>
                    <button id="send-button">Send</button>
                </div>
            </div>
        `,n=new v(t.id,d)):r==="timer"&&(t.innerHTML=`
            <div class="timer-window-header">
                <div class="close-button">X</div>
            </div>

            <div id="stopwatch-timer-container">
                <section class="stopwatch">
                    <h1>Stopwatch</h1>
                    <div id="stopwatch-display">00:00:00</div>
                    <button id="stopwatch-start-button">Start</button>
                    <button id="stopwatch-pause-button">Pause</button>
                    <button id="stopwatch-stop-button">Stop</button>
                    <button id="stopwatch-reset-button">Reset</button>
                    <audio id="tick-sound" src="./sounds/tick.mp3" loop></audio>

                </section>
                <section class="timer">
                    <h1>Timer</h1>
                    <input type="text" id="timer-input" placeholder="Enter time in seconds">
                    <button id="timer-start-button">Start Timer</button>
                    <div id="timer-display">00:00:00</div>
                    <button id="timer-stop-button">Stop Alarm</button>
                    <audio id="alarm-sound" src="./sounds/alarm.mp3" loop></audio>
                    <audio id="tick-sound" src="./sounds/tick.mp3" loop></audio>

                </section>
            </div>
        `,n=new g(t.id,d)),d.push(n),n.showWindow()}const S=document.getElementById("quizButton"),f=document.getElementById("memoryButton"),b=document.getElementById("chatButton"),k=document.getElementById("timerButton");S.addEventListener("click",()=>u("quiz"));f.addEventListener("click",()=>u("memory"));b.addEventListener("click",()=>u("chat"));k.addEventListener("click",()=>u("timer"));
